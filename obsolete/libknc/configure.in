AC_PREREQ(2.50)
AC_INIT(libknc/knc.h)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(libknc,1.0)
AM_MAINTAINER_MODE

dnl ---------------------------------------------------------------------------
dnl Version
dnl ---------------------------------------------------------------------------
LIBKNC_AGE=0
LIBKNC_REVISION=0
LIBKNC_CURRENT=0
AC_SUBST(LIBKNC_AGE)
AC_SUBST(LIBKNC_REVISION)
AC_SUBST(LIBKNC_CURRENT)
LIBKNC_VERSION_INFO="`expr $LIBKNC_CURRENT + $LIBKNC_REVISION`:$LIBKNC_AGE:$LIBKNC_REVISION"
AC_SUBST(LIBKNC_VERSION_INFO)

dnl ---------------------------------------------------------------------------
dnl We need some programs
dnl ---------------------------------------------------------------------------
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PROG_INTLTOOL

dnl ---------------------------------------------------------------------------
dnl Interantionalization
dnl ---------------------------------------------------------------------------
AC_DEFINE(GETTEXT_PACKAGE, "libknc", [Gettext package])
ALL_LINGUAS=""
AM_GLIB_GNU_GETTEXT
AC_PROG_INTLTOOL
KNC_GLADE_DIR='$(datadir)/'${GETTEXT_PACKAGE}'/interfaces'
AC_SUBST(KNC_GLADE_DIR)

dnl ---------------------------------------------------------------------------
dnl Turn on debugging and all warnings when using gcc
dnl ---------------------------------------------------------------------------
if test "$ac_cv_prog_gcc" = "yes"; then
        CFLAGS="$CFLAGS -g -Wall -Wmissing-declarations -Wmissing-prototypes"
	LDFLAGS="$LDFLAGS -g -Wall"
fi

dnl ---------------------------------------------------------------------------
dnl Libraries we need for libknc
dnl ---------------------------------------------------------------------------
LIBKNC_CFLAGS=
LIBKNC_LIBS=
AC_SUBST(LIBKNC_CFLAGS)
AC_SUBST(LIBKNC_LIBS)

AC_PATH_PROG(PKG_CONFIG,pkg-config,"You need pkg-config")

dnl ---------------------------------------------------------------------------
dnl Libraries we need for libgknc
dnl ---------------------------------------------------------------------------
have_gknc=false
gknc_msg="no"
PKG_CHECK_MODULES(GKNC, gtk+-2.0, [
	have_gknc=true
	gknc_msg="yes"])
AM_CONDITIONAL(HAVE_GKNC, $have_gknc)
AC_SUBST(GKNC_LIBS)
AC_SUBST(GKNC_CFLAGS)

dnl ---------------------------------------------------------------------------
dnl Libraries we need for libgpknc
dnl ---------------------------------------------------------------------------
AC_PATH_PROG(GP_PORT_CONFIG,gphoto2-port-config,"You need libgphoto2_port")
have_gpknc=true
GPKNC_LIBS="`$GP_PORT_CONFIG --libs`"
GPKNC_CFLAGS="`$GP_PORT_CONFIG --cflags`"
AC_SUBST(GPKNC_LIBS)
AC_SUBST(GPKNC_CFLAGS)
AM_CONDITIONAL(HAVE_GPKNC, $have_gpknc)

dnl ---------------------------------------------------------------------------
dnl Libraries we need for the libgphoto2 plugin
dnl ---------------------------------------------------------------------------
have_gp=false
gp_msg=no
try_gp=$have_gpknc
AC_ARG_WITH(gp, [  --without-libgphto2   Don't compile the libgphoto2 plugin],[
	if test x$withval = xno; then
		try_gp=false
		gp_msg="no (not requested)"
	fi])
if $try_gp; then
	PKG_CHECK_MODULES(GP, libgphoto2, [
		have_gp=true
		GP_PATH="`$PKG_CONFIG --variable=driverdir libgphoto2`"
		gp_msg="yes (${GP_PATH})"])
fi
AM_CONDITIONAL(HAVE_GP, $have_gp)
AC_SUBST(GP_PATH)
AC_SUBST(GP_CFLAGS)
AC_SUBST(GP_LIBS)

dnl ---------------------------------------------------------------------------
dnl libraries we need for tests/libgknc
dnl ---------------------------------------------------------------------------
have_testgknc=false
PKG_CHECK_MODULES(TEST_GKNC, gtk+-2.0 gthread-2.0, [
	have_testgknc=true])
if $have_testgknc; then
	have_testgknc=$have_gp
fi
if $have_testgknc; then
	TEST_GKNC_CFLAGS="${TEST_GKNC_CFLAGS} ${GP_CFLAGS}"
	TEST_GKNC_LIBS="${TEST_GKNC_LIBS} ${GP_LIBS}"
fi
AM_CONDITIONAL(HAVE_TEST_GKNC, $have_testgknc)
AC_SUBST(TEST_GKNC_CFLAGS)
AC_SUBST(TEST_GKNC_LIBS)

dnl ---------------------------------------------------------------------------
dnl libraries we need for the CORBA server
dnl ---------------------------------------------------------------------------
have_corba=false
try_corba=$have_gknc
if $try_corba; then
	try_corba=$have_gpknc
fi
corba_msg=no
AC_ARG_WITH(corba,[  --without-corba  Don't compile the corba server],[
	if test x$withval = xno; then
		try_corba=false
		corba_msg="no (not requested)"
	fi])
if $try_corba; then
    PKG_CHECK_MODULES(CORBA, libglade-2.0 libbonoboui-2.0 ORBit-2.0 gnocam, [
	GNOME_C_IDL="`$PKG_CONFIG --variable=datadir gnocam`/idl/GNOME_C.idl"
	ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
	have_corba=true
	corba_msg="yes (using ${GNOME_C_IDL})"
    ])
fi
CORBA_CFLAGS="${CORBA_CFLAGS} `$GP_PORT_CONFIG --cflags`"
CORBA_LIBS="${CORBA_LIBS} `$GP_PORT_CONFIG --libs`"
AM_CONDITIONAL(HAVE_CORBA, $have_corba)
AC_SUBST(GNOME_C_IDL)
AC_SUBST(ORBIT_IDL)
AC_SUBST(CORBA_CFLAGS)
AC_SUBST(CORBA_LIBS)

AC_OUTPUT([ intl/Makefile po/Makefile.in
Makefile
libknc/Makefile
libknc/libknc.pc
libgknc/Makefile
libgpknc/Makefile
libgphoto2/Makefile
corba/Makefile
corba/icons/Makefile
tests/Makefile
tests/corba/Makefile
tests/libgpknc/Makefile
tests/libgknc/Makefile
])

echo "

Configuration (libknc):

	Source code location:      ${srcdir}
	Version:                   ${VERSION}
	Compiler:                  ${CC}

	libgphoto2 plugin:         ${gp_msg}
	CORBA server:              ${corba_msg}
"
