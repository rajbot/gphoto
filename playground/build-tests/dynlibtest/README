=======================================================================
dynlibtest - package to check the dynamic loading of libraries
=======================================================================


Requirements and Consequences:
------------------------------

  R1  One sourcecode, many platforms.
  
      Avoid lots of #ifdefs in the code.
      This should be easiest to achieve by relying on libltdl and
      removing dlopen() code.


  R2  Build on systems without libltdl
  
      If not present on the system, use included libltdl.


  R3  Build suitable libraries for these platforms:

      In approximate order of decreasing importance:
        a) GNU/Linux (alpha, ppc, x86, amd64)
        b) FreeBSD (x86, ...)
        c) MacOS X / darwin (ppc)
        d) Windows/MinGW32 (x86, amd64)
        e) OpenBSD (x86, ...)
        f) NetBSD (...)
        g) Solaris (x86, sparc)
      
      And, if possible:
        h) IRIX (mips)
        i) OS/2 (x86)
        j) ...
  
  
  R4  Concurrent use of multiple driver modules with conflicting symbol names

      So that one can load multiple different camlibs which all implement
      the same interface.


  R5  System specifics: Win32
  
      - linking stuff compiled with MSVC, Watcom or other compilers against
        our code must be possible (DLL/DEF/LIB plus .h file)
      - This implies we have to build .DLL files, DLL specs, DLL .libs, and
        other strange stuff.


  R6  System specifics: MacOS X
  
      - must integratable with other applications/desktop


  R7  System specifics: OS/2
  
      - Is there a reasonable build system for OS/2? If not, let's ditch it.


  R8  Support two kinds of modules:

      - system specific library (.so, .dll, .dylib, .a, ...) for
        libgphoto2, libgphoto2_port
      - some internal format (like e.g. .la + something) for the camlibs


  R9  C preprocessor macros for reasonable symbol definitions (if possible)

      Should be compatible with non-GNU C preprocessors.


  R10 Multi-threaded applications should be supported


  R11 Support static linking

      It should be possible to statically link an application against
      libgphoto2, libgphoto2_port and a (number of) camlib(s) for use
      on embedded systems.


  R12 Run time configurable location of modules and translations
  
      lt_open(), bindtextdomain(), etc. should use user configurable
      pathes, probably environment variables, something like
      
          foo=env('FOO_PATH');
	  lt_open(foo?foo:STATIC_FOO_PATH, flags);



More Detailed Remarks:
----------------------


  R1  Completely relying on libltdl may
      - cause problems with non-GNU compilers (really?)
      - if any system should not work with libltdl, we can still register 
        our own module loader with libltdl:
	(libtool.info.gz)Module loaders for libltdl


  R2  Same should go for libintl, libiconv, popt, and other stuff.


  R3  This requires installing and keeping the *.la files around.


  R4  This is no problem at all as long as we don't link the library with
      "-dlopen mod.la" for use with platforms which need the dlopenpreload.
      To support these platforms, we'd need to follow the example from

          (libtool.info.gz)Modules for libltdl

      Apart from that, we can use conflicting names without problems.

  R11 Statically linking all that stuff together reminds me of
      dlopenpreload and "-dlopen foo.la". Perhaps this could just
      be forced?



Issues:
-------

  I1  SF.net CF x86-solaris1 doesn't build
      Reason: There is no "ar". Bummer.


  I2  SF.net CF ppc-osx1 (darwin 5.5) "make check" doesn't work
      
      It only works after installation, and in the installation dir.



=======================================================================
End of README.
=======================================================================
