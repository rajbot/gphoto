#ifndef GNOME_CAMERA_IDL
#define GNOME_CAMERA_IDL

#include <Bonobo.idl>

module GNOME {
module C {

	exception BadID {};
	exception Error {};

	typedef unsigned long ID;
	typedef sequence<unsigned long> IDList;
	typedef sequence<octet> Icon;

	enum ValType {
		VAL_TYPE_BOOLEAN,
		VAL_TYPE_EMPTY,
		VAL_TYPE_STRING,
		VAL_TYPE_INTEGER
	};

	union Val switch (ValType) {
	case VAL_TYPE_BOOLEAN: boolean v_bool;
	case VAL_TYPE_STRING:  string  v_string;
	case VAL_TYPE_INTEGER: long    v_integer;
	};

	struct Range {
		double min;
		double max;
		double incr;
	};

	/* Alternative values */
	struct Alt {
		sequence<Val>   vals;
		sequence<Range> ranges;
	};
	typedef sequence<Alt> AltList;

	/* A property */
	interface Prop : Bonobo::Unknown {
		readonly attribute string  name;
		readonly attribute string  description;
		readonly attribute AltList alts;
		attribute Val val;
	};
	typedef sequence<Prop> PropList;

	/* A bag containing properties */
	interface Bag : Bonobo::Unknown {

		typedef sequence<Bag> BagList;

		readonly attribute string name;
		readonly attribute string description;
		readonly attribute Icon icon;
		readonly attribute BagList bags;
		readonly attribute PropList props;
	};

	interface ReadCallback : Bonobo::Unknown {

		exception Cancel {};

		typedef sequence<octet> Data;

		void read (in Data data) raises (Cancel);
	};

	interface If : Bonobo::Unknown {

		attribute string name;

		void   read (in ReadCallback callback);
		void   write ();
	};

	interface File : Bonobo::Unknown {

		IDList get_ifs () raises (Error);
		ID add_if (in If i);
		If get_if (in ID id) raises (BadID);
		void rm_if  (in ID id) raises (BadID);
	};

	interface Dir : Bonobo::Unknown {

		attribute string name;

		IDList get_files () raises (Error);
		ID add_file (in File file);
		File get_file (in ID id) raises (BadID, Error);
		void rm_file  (in ID id) raises (BadID, Error);

		IDList get_dirs () raises (Error);
		ID add_dir (in Dir dir);
		Dir get_dir (in ID id) raises (BadID, Error);
		void rm_dir  (in ID id) raises (BadID, Error);
	};

	interface Camera : Bonobo::Unknown {

		readonly attribute string manufacturer;
		readonly attribute string model;

		/* Get the root directory */
		Dir get_dir () raises (Error);

		/* Properties */
		Bag get_bag () raises (Error);
	};

	interface Mngr : Bonobo::Unknown {

		/* Querying the supported devices */
		typedef sequence<string> PortList;
		struct Model {
			string model;
			PortList ports;
		};
		typedef sequence<Model> ModelList;
		struct Manufacturer {
			string manufacturer;
			ModelList models;
		};
		typedef sequence<Manufacturer> ManufacturerList;
		ManufacturerList get_devices ();

		/* Querying cameras we are already connected to. */
		IDList get_cameras ();
		Camera get_camera (in ID id_device) raises (BadID);

		/* Connecting to cameras */
		Camera connect (in string manufacturer, in string model,
				in string port) raises (Error);
	};
};
};

#endif
