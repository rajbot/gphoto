gphoto-suite-all is OUT OF ORDER.

Check out gphoto-suite instead.
























                gphoto-suite
		------------
		
gphoto-suite is an "umbrella package" which contains all the commonly
required (sub)packages related to libgphoto2 in one convenient package.

gphoto-suite makes compiling and installing from scratch easier for

  - people without much compilation experience
  - people who use cross compilation environments
  - people who run test builds and runtime tests


Legal stuff:
------------

gphoto-suite includes multiple packages which are mostly licensed under
GPL or LGPL. See the respective packages for details.


Getting gphoto-suite from SVN:
------------------------------

If you happen to have a non-anonymous access method to the CVS
of some module mentioned in checkout-config.txt, you may want to add a
line "${anonymous_cvsroot} ${your_cvsroot}" to checkout-config.cvsroot.map.

Get gphoto-suite via SVN and change into its directory:

    svn co https://svn.sourceforge.net/svnroot/gphoto/trunk/gphoto-suite gphoto-suite
    cd gphoto-suite

This downloads the programs from the gphoto project SVN. If you also
want to add third party software (e.g. libusb, libexif, popt), then
run

    ./checkout-config.sh

or, if that fails (checkout-config.sh isn't tested all that well),

    cd src

and check out the other modules according to the definitions from
checkout-config.txt.


Getting gphoto-suite from source tarball:
-----------------------------------------

If you got gphoto-suite from a tarball, the source subdirectories
should already be there. To add missing subdirectories to a tarball,
you can also run checkout-config.sh


Initialize the buildsystem:
---------------------------

This step is only required for SVN/CVS checkouts or if you have just
added new CVS/SVN directories to src/.

If you have only added the contents of a source tarball to src/, then
you do *not* need it.

    ./autogen.sh


Configure the build system:
---------------------------

This step is required regardless of the method you used to get
gphoto-suite.

Run

    ./configure --help=recursive

to get help on all the parameters for subprojects.

Note that some subproject options will be automatically set by
libexif-testsuite. This mostly concerns the *_CFLAGS and *_LIBS
for the libraries libexif-testsuite provides by itself.

Then run (for an in-tree build)

    ./configure

with your favourite configure parameters. Or, for an out-of-tree build:

    mkdir ../libexif-testsuite-build
    cd ../libexif-testsuite-build
    ../libexif-testsuite/configure

with your favourite configure parameters.


Cross-compilation:
------------------

This is an example using "i586-mingw32msvc" as the system for which
you want to compile (i.e. i586-mingw32msvc-gcc will be the compiler).
The build system for this example is i686-pc-linux (you can run
config.guess to determine the build system).

Note that you may want *not* to use

    ../configure --prefix=/foo/bar/usr ...
    make all
    make install

but

    ../configure --prefix=/usr ...
    make all
    make DESTDIR=/foo/bar install

if you have the "root" (/) directory of the system the stuff is
supposed to run on mapped into /foo/bar. It depends on your setup.

You can build gphoto-suite for that platform by running:

    mkdir _win32 && cd _win32
    ../configure --prefix=/tmp/lt-win32-inst \
        --host=i586-mingw32msvc --build=i686-pc-linux
    make all
    make install

If you have an emulator properly installed for the binaries, even
"make check" will give results. Yes, you can compile and test Windows
binaries on a Linux system!


Run the tests:
--------------

Run

    make check

and examine the output.


Check the distribution mechanism:
---------------------------------

Run

    make distcheck

and see whether it finishes without errors.

